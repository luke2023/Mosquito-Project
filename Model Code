import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Step 1: Load the data (update the file path to your actual file)
file_path = 'Data.xlsx'  # Update with your file path
data = pd.read_excel(file_path)

# Step 2: Preprocess the data
# Normalize the features (weather data) using MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data[['temp', 'precip', 'solarradiation', 'humidity', 'windspeed']])

# Prepare input features (X) and output target (y) for LSTM
X_train = []
y_train = []

# Define time_steps for the LSTM model (experiment with larger time steps)
time_steps = 2  # Increasing time_steps to give the model more historical context
provided=26
prediction=7
all=provided+prediction
# Create sequences of weather data and mosquito density for training (9/5 to 9/30)
for i in range(time_steps, len(scaled_data[:provided])):  # We stop at index 26 (which corresponds to 9/30)
    X_train.append(scaled_data[i-time_steps:i])
    y_train.append(data['mosquito_density'].iloc[i])

X_train, y_train = np.array(X_train), np.array(y_train)

# Step 3: Define the optimized LSTM model (without dropout)
model = Sequential()

# First LSTM layer
model.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))

# Second LSTM layer
model.add(LSTM(units=50, return_sequences=False))

# Dense layer with more units for greater capacity
model.add(Dense(units=50, activation='relu'))

# Output layer for mosquito density prediction
model.add(Dense(units=1))

# Step 4: Compile the model with a custom learning rate for the Adam optimizer
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mean_squared_error')

# Step 5: Train the LSTM model with Early Stopping
early_stopping = EarlyStopping(monitor='loss', patience=100, restore_best_weights=True)

# Train the model
model.fit(X_train, y_train, epochs=200, batch_size=16, callbacks=[early_stopping], verbose=1)

# Step 6: Make predictions for the training period (9/6 to 9/30)
train_predictions = model.predict(X_train).flatten()

# Step 7: Prepare data for future predictions (10/1 to 10/7)
X_future = []

# Prepare sequences for future prediction (10/1 to 10/7)
for i in range(time_steps, len(scaled_data[provided:all]) + time_steps):
    X_future.append(scaled_data[provided+i-2*time_steps:provided+i-time_steps])

X_future = np.array(X_future)

# Predict mosquito density for the future period (10/1 to 10/7)
future_predictions = model.predict(X_future).flatten()

# Step 8: Combine actual and predicted values
# Exclude the first day from the actual mosquito density data for comparison (from 9/6 onwards)
y_train_adjusted = data['mosquito_density'][time_steps:provided].values  # Adjusted for time_steps
train_predictions_adjusted = train_predictions  # Predictions start from 9/6

# Combine training and future predictions
full_predictions = np.concatenate([train_predictions_adjusted, future_predictions])

# Step 9: Create a date range from 9/6 to 10/7 (since we exclude the first day)
date_range = pd.date_range(start='2024-09-06', periods=all-time_steps, freq='D')

# Step 10: Calculate MAE and MRAE for the training period (9/6 to 9/30)
mae = mean_absolute_error(y_train_adjusted, train_predictions_adjusted)
mrae = np.mean(np.abs(y_train_adjusted - train_predictions_adjusted) / np.abs(y_train_adjusted))

print(f"Mean Absolute Error (MAE) for 9/6 to 9/30: {mae:.4f}")
print(f"Mean Relative Absolute Error (MRAE) for 9/6 to 9/30: {mrae:.4f}")

# Step 11: Plot the mosquito density predictions
plt.figure(figsize=(12,6))

# Plot actual mosquito density (9/6 to 9/30)
plt.plot(date_range[:provided-time_steps], y_train_adjusted, label='Actual Mosquito Density (9/6 to 9/30)', color='red', marker='o')

# Plot predicted mosquito density (9/6 to 9/30)
plt.plot(date_range[:provided-time_steps], train_predictions_adjusted, label='Predicted Mosquito Density (9/6 to 9/30)', color='green', linestyle='--', marker='x')

# Plot predicted mosquito density (10/1 to 10/7)
plt.plot(date_range[provided-time_steps:], future_predictions, label='Predicted Mosquito Density (10/1 to 10/7)', color='blue', linestyle='--', marker='x')

# Set labels and title
plt.title('Mosquito Density Predictions: Optimized LSTM Model (9/6 to 10/7)')
plt.xlabel('Date')
plt.ylabel('Mosquito Density')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Step 12: Print future mosquito density predictions (10/1 to 10/7)
print("Future mosquito density predictions (10/1 to 10/7):")
for date, prediction in zip(date_range[provided-time_steps:], future_predictions):
    print(f"{date.strftime('%Y-%m-%d')}: {prediction:.4f}")
