import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.linear_model import LinearRegression

# Load the data
file_path = 'Data.xlsx'
df = pd.read_excel(file_path)

# Assuming 'mosquito_count' is the target variable and others are features
features = df[['humidity', 'temp', 'CO2', 'precipitation']]
target = df['mosquito']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Reshape data for LSTM [samples, timesteps, features]
X_train_lstm = np.expand_dims(X_train, axis=1)
X_test_lstm = np.expand_dims(X_test, axis=1)

# Define the LSTM model
model_lstm = Sequential()
model_lstm.add(LSTM(100, activation='relu', input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])))
model_lstm.add(Dense(1))
model_lstm.compile(optimizer='adam', loss='mse')

# Train the LSTM model
model_lstm.fit(X_train_lstm, y_train, epochs=400, batch_size=32, validation_data=(X_test_lstm, y_test), verbose=1)

# Extract features from LSTM model
train_features_lstm = model_lstm.predict(X_train_lstm)
test_features_lstm = model_lstm.predict(X_test_lstm)

# Reshape the features for PDL model
train_features_lstm = train_features_lstm.reshape(-1, 1)
test_features_lstm = test_features_lstm.reshape(-1, 1)

# Combine LSTM features with original features for PDL model
X_train_pdl = np.concatenate((X_train, train_features_lstm), axis=1)
X_test_pdl = np.concatenate((X_test, test_features_lstm), axis=1)

# Define the Polynomial Distributed Lag (PDL) model using Linear Regression
model_pdl = LinearRegression()
model_pdl.fit(X_train_pdl, y_train)

# Predict using the PDL model
y_pred = model_pdl.predict(X_test_pdl)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Root Mean Squared Error: {rmse}')

import matplotlib.pyplot as plt

# Predict using the LSTM model
y_pred = model_lstm.predict(X_test_lstm)

# Plot the actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual', marker='o')
plt.plot(y_pred, label='Predicted', marker='x')
plt.title('Actual vs Predicted Values')
plt.xlabel('Samples')
plt.ylabel('Mosquitos')
plt.legend()
plt.show()
